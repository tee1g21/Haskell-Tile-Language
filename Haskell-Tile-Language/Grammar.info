-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from .\Grammar.y
-----------------------------------------------------------------------------

state 59 contains 7 reduce/reduce conflicts.
state 60 contains 2 shift/reduce conflicts.
state 65 contains 1 reduce/reduce conflicts.
state 121 contains 1 reduce/reduce conflicts.
state 122 contains 1 reduce/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseCalc -> Init                           (0)
	Init -> input Inps ';' Exp                         (1)
	Init -> Exp                                        (2)
	Exp -> place Tile                                  (3)
	Exp -> newLine                                     (4)
	Exp -> repeat '(' Num ')' '{' Exp '}'              (5)
	Exp -> for '(' var ',' Num ',' Num ')' '{' Exp '}'   (6)
	Exp -> if '(' Bool ')' '{' Exp '}' else '{' Exp '}'   (7)
	Exp -> if '(' Bool ')' '{' Exp '}'                 (8)
	Exp -> var '=' Vars                                (9)
	Exp -> Exp ';' Exp                                 (10)
	Exp -> Exp ';'                                     (11)
	Tile -> rotate '(' Num ',' Tile ')'                (12)
	Tile -> scale '(' Num ',' Tile ')'                 (13)
	Tile -> reflectX '(' Tile ')'                      (14)
	Tile -> reflectY '(' Tile ')'                      (15)
	Tile -> conjugate '(' Tile ',' Tile ')'            (16)
	Tile -> negate '(' Tile ')'                        (17)
	Tile -> subtile '(' Tile ',' Num ',' Num ',' Num ')'   (18)
	Tile -> fill '(' Colour ',' Num ')'                (19)
	Tile -> build '{' Exp '}'                          (20)
	Tile -> var                                        (21)
	Tile -> '(' Tile ')'                               (22)
	Num -> size '(' Tile ')'                           (23)
	Num -> Num '+' Num                                 (24)
	Num -> Num '-' Num                                 (25)
	Num -> Num '*' Num                                 (26)
	Num -> Num '/' Num                                 (27)
	Num -> Num '%' Num                                 (28)
	Num -> '-' Num                                     (29)
	Num -> int                                         (30)
	Num -> var                                         (31)
	Num -> '(' Num ')'                                 (32)
	Bool -> true                                       (33)
	Bool -> false                                      (34)
	Bool -> Bool AND Bool                              (35)
	Bool -> Bool OR Bool                               (36)
	Bool -> NOT Bool                                   (37)
	Bool -> Num '<' Num                                (38)
	Bool -> Num '>' Num                                (39)
	Bool -> Num '<' '=' Num                            (40)
	Bool -> Num '>' '=' Num                            (41)
	Bool -> var                                        (42)
	Bool -> Vars '=' '=' Vars                          (43)
	Bool -> '(' Bool ')'                               (44)
	Vars -> Num                                        (45)
	Vars -> Bool                                       (46)
	Vars -> Tile                                       (47)
	Vars -> '~' var                                    (48)
	Inps -> var                                        (49)
	Inps -> var ',' Inps                               (50)
	Colour -> white                                    (51)
	Colour -> black                                    (52)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	input          { TokenInput _ }
	place          { TokenPlace _ }
	newLine        { TokenNewLine _ }
	repeat         { TokenRepeat _ }
	for            { TokenFor _ }
	if             { TokenIf _ }
	else           { TokenElse _ }
	rotate         { TokenRotate _ }
	scale          { TokenScale _ }
	size           { TokenSize _ }
	reflectX       { TokenReflectX _ }
	reflectY       { TokenReflectY _ }
	conjugate      { TokenConjugate _ }
	negate         { TokenNegate _ }
	subtile        { TokenSubtile _ }
	fill           { TokenFill _ }
	build          { TokenBuild _ }
	'{'            { TokenLeftCurly _ }
	'}'            { TokenRightCurly _ }
	'('            { TokenLeftParen _ }
	')'            { TokenRightParen _ }
	','            { TokenComma _ }
	'+'            { TokenPlus _ }
	'-'            { TokenMinus _ }
	'/'            { TokenDivide _ }
	'*'            { TokenMultiply _ }
	'%'            { TokenMod _ }
	'='            { TokenEq _ }
	'<'            { TokenLessThan _ }
	'>'            { TokenGreaterThan _ }
	';'            { TokenSemiColon _ }
	'~'            { TokenTilde _ }
	true           { TokenTrue _ }
	false          { TokenFalse _ }
	AND            { TokenAnd _ }
	OR             { TokenOr _ }
	NOT            { TokenNot _ }
	int            { TokenInt _ $$ }
	var            { TokenVar _ $$ }
	white          { TokenWhite _ }
	black          { TokenBlack _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseCalc rule  0
	Init            rules 1, 2
	Exp             rules 3, 4, 5, 6, 7, 8, 9, 10, 11
	Tile            rules 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22
	Num             rules 23, 24, 25, 26, 27, 28, 29, 30, 31, 32
	Bool            rules 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
	Vars            rules 45, 46, 47, 48
	Inps            rules 49, 50
	Colour          rules 51, 52

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parseCalc -> . Init                          (rule 0)

	input          shift, and enter state 2
	place          shift, and enter state 5
	newLine        shift, and enter state 6
	repeat         shift, and enter state 7
	for            shift, and enter state 8
	if             shift, and enter state 9
	var            shift, and enter state 10

	Init           goto state 3
	Exp            goto state 4

State 1

	Init -> . input Inps ';' Exp                        (rule 1)

	input          shift, and enter state 2


State 2

	Init -> input . Inps ';' Exp                        (rule 1)

	var            shift, and enter state 29

	Inps           goto state 28

State 3

	%start_parseCalc -> Init .                          (rule 0)

	%eof           accept


State 4

	Init -> Exp .                                       (rule 2)
	Exp -> Exp . ';' Exp                                (rule 10)
	Exp -> Exp . ';'                                    (rule 11)

	';'            shift, and enter state 27
	%eof           reduce using rule 2


State 5

	Exp -> place . Tile                                 (rule 3)

	rotate         shift, and enter state 16
	scale          shift, and enter state 17
	reflectX       shift, and enter state 18
	reflectY       shift, and enter state 19
	conjugate      shift, and enter state 20
	negate         shift, and enter state 21
	subtile        shift, and enter state 22
	fill           shift, and enter state 23
	build          shift, and enter state 24
	'('            shift, and enter state 25
	var            shift, and enter state 26

	Tile           goto state 15

State 6

	Exp -> newLine .                                    (rule 4)

	'}'            reduce using rule 4
	';'            reduce using rule 4
	%eof           reduce using rule 4


State 7

	Exp -> repeat . '(' Num ')' '{' Exp '}'             (rule 5)

	'('            shift, and enter state 14


State 8

	Exp -> for . '(' var ',' Num ',' Num ')' '{' Exp '}'    (rule 6)

	'('            shift, and enter state 13


State 9

	Exp -> if . '(' Bool ')' '{' Exp '}' else '{' Exp '}'    (rule 7)
	Exp -> if . '(' Bool ')' '{' Exp '}'                (rule 8)

	'('            shift, and enter state 12


State 10

	Exp -> var . '=' Vars                               (rule 9)

	'='            shift, and enter state 11


State 11

	Exp -> var '=' . Vars                               (rule 9)

	rotate         shift, and enter state 16
	scale          shift, and enter state 17
	size           shift, and enter state 44
	reflectX       shift, and enter state 18
	reflectY       shift, and enter state 19
	conjugate      shift, and enter state 20
	negate         shift, and enter state 21
	subtile        shift, and enter state 22
	fill           shift, and enter state 23
	build          shift, and enter state 24
	'('            shift, and enter state 54
	'-'            shift, and enter state 46
	'~'            shift, and enter state 55
	true           shift, and enter state 56
	false          shift, and enter state 57
	NOT            shift, and enter state 58
	int            shift, and enter state 47
	var            shift, and enter state 59

	Tile           goto state 50
	Num            goto state 51
	Bool           goto state 60
	Vars           goto state 61

State 12

	Exp -> if '(' . Bool ')' '{' Exp '}' else '{' Exp '}'    (rule 7)
	Exp -> if '(' . Bool ')' '{' Exp '}'                (rule 8)

	rotate         shift, and enter state 16
	scale          shift, and enter state 17
	size           shift, and enter state 44
	reflectX       shift, and enter state 18
	reflectY       shift, and enter state 19
	conjugate      shift, and enter state 20
	negate         shift, and enter state 21
	subtile        shift, and enter state 22
	fill           shift, and enter state 23
	build          shift, and enter state 24
	'('            shift, and enter state 54
	'-'            shift, and enter state 46
	'~'            shift, and enter state 55
	true           shift, and enter state 56
	false          shift, and enter state 57
	NOT            shift, and enter state 58
	int            shift, and enter state 47
	var            shift, and enter state 59

	Tile           goto state 50
	Num            goto state 51
	Bool           goto state 52
	Vars           goto state 53

State 13

	Exp -> for '(' . var ',' Num ',' Num ')' '{' Exp '}'    (rule 6)

	var            shift, and enter state 49


State 14

	Exp -> repeat '(' . Num ')' '{' Exp '}'             (rule 5)

	size           shift, and enter state 44
	'('            shift, and enter state 45
	'-'            shift, and enter state 46
	int            shift, and enter state 47
	var            shift, and enter state 48

	Num            goto state 43

State 15

	Exp -> place Tile .                                 (rule 3)

	'}'            reduce using rule 3
	';'            reduce using rule 3
	%eof           reduce using rule 3


State 16

	Tile -> rotate . '(' Num ',' Tile ')'               (rule 12)

	'('            shift, and enter state 42


State 17

	Tile -> scale . '(' Num ',' Tile ')'                (rule 13)

	'('            shift, and enter state 41


State 18

	Tile -> reflectX . '(' Tile ')'                     (rule 14)

	'('            shift, and enter state 40


State 19

	Tile -> reflectY . '(' Tile ')'                     (rule 15)

	'('            shift, and enter state 39


State 20

	Tile -> conjugate . '(' Tile ',' Tile ')'           (rule 16)

	'('            shift, and enter state 38


State 21

	Tile -> negate . '(' Tile ')'                       (rule 17)

	'('            shift, and enter state 37


State 22

	Tile -> subtile . '(' Tile ',' Num ',' Num ',' Num ')'    (rule 18)

	'('            shift, and enter state 36


State 23

	Tile -> fill . '(' Colour ',' Num ')'               (rule 19)

	'('            shift, and enter state 35


State 24

	Tile -> build . '{' Exp '}'                         (rule 20)

	'{'            shift, and enter state 34


State 25

	Tile -> '(' . Tile ')'                              (rule 22)

	rotate         shift, and enter state 16
	scale          shift, and enter state 17
	reflectX       shift, and enter state 18
	reflectY       shift, and enter state 19
	conjugate      shift, and enter state 20
	negate         shift, and enter state 21
	subtile        shift, and enter state 22
	fill           shift, and enter state 23
	build          shift, and enter state 24
	'('            shift, and enter state 25
	var            shift, and enter state 26

	Tile           goto state 33

State 26

	Tile -> var .                                       (rule 21)

	'}'            reduce using rule 21
	')'            reduce using rule 21
	','            reduce using rule 21
	';'            reduce using rule 21
	%eof           reduce using rule 21


State 27

	Exp -> Exp ';' . Exp                                (rule 10)
	Exp -> Exp ';' .                                    (rule 11)

	place          shift, and enter state 5
	newLine        shift, and enter state 6
	repeat         shift, and enter state 7
	for            shift, and enter state 8
	if             shift, and enter state 9
	'}'            reduce using rule 11
	';'            reduce using rule 11
	var            shift, and enter state 10
	%eof           reduce using rule 11

	Exp            goto state 32

State 28

	Init -> input Inps . ';' Exp                        (rule 1)

	';'            shift, and enter state 31


State 29

	Inps -> var .                                       (rule 49)
	Inps -> var . ',' Inps                              (rule 50)

	','            shift, and enter state 30
	';'            reduce using rule 49


State 30

	Inps -> var ',' . Inps                              (rule 50)

	var            shift, and enter state 29

	Inps           goto state 96

State 31

	Init -> input Inps ';' . Exp                        (rule 1)

	place          shift, and enter state 5
	newLine        shift, and enter state 6
	repeat         shift, and enter state 7
	for            shift, and enter state 8
	if             shift, and enter state 9
	var            shift, and enter state 10

	Exp            goto state 95

State 32

	Exp -> Exp . ';' Exp                                (rule 10)
	Exp -> Exp ';' Exp .                                (rule 10)
	Exp -> Exp . ';'                                    (rule 11)

	'}'            reduce using rule 10
	';'            reduce using rule 10
	%eof           reduce using rule 10


State 33

	Tile -> '(' Tile . ')'                              (rule 22)

	')'            shift, and enter state 94


State 34

	Tile -> build '{' . Exp '}'                         (rule 20)

	place          shift, and enter state 5
	newLine        shift, and enter state 6
	repeat         shift, and enter state 7
	for            shift, and enter state 8
	if             shift, and enter state 9
	var            shift, and enter state 10

	Exp            goto state 93

State 35

	Tile -> fill '(' . Colour ',' Num ')'               (rule 19)

	white          shift, and enter state 91
	black          shift, and enter state 92

	Colour         goto state 90

State 36

	Tile -> subtile '(' . Tile ',' Num ',' Num ',' Num ')'    (rule 18)

	rotate         shift, and enter state 16
	scale          shift, and enter state 17
	reflectX       shift, and enter state 18
	reflectY       shift, and enter state 19
	conjugate      shift, and enter state 20
	negate         shift, and enter state 21
	subtile        shift, and enter state 22
	fill           shift, and enter state 23
	build          shift, and enter state 24
	'('            shift, and enter state 25
	var            shift, and enter state 26

	Tile           goto state 89

State 37

	Tile -> negate '(' . Tile ')'                       (rule 17)

	rotate         shift, and enter state 16
	scale          shift, and enter state 17
	reflectX       shift, and enter state 18
	reflectY       shift, and enter state 19
	conjugate      shift, and enter state 20
	negate         shift, and enter state 21
	subtile        shift, and enter state 22
	fill           shift, and enter state 23
	build          shift, and enter state 24
	'('            shift, and enter state 25
	var            shift, and enter state 26

	Tile           goto state 88

State 38

	Tile -> conjugate '(' . Tile ',' Tile ')'           (rule 16)

	rotate         shift, and enter state 16
	scale          shift, and enter state 17
	reflectX       shift, and enter state 18
	reflectY       shift, and enter state 19
	conjugate      shift, and enter state 20
	negate         shift, and enter state 21
	subtile        shift, and enter state 22
	fill           shift, and enter state 23
	build          shift, and enter state 24
	'('            shift, and enter state 25
	var            shift, and enter state 26

	Tile           goto state 87

State 39

	Tile -> reflectY '(' . Tile ')'                     (rule 15)

	rotate         shift, and enter state 16
	scale          shift, and enter state 17
	reflectX       shift, and enter state 18
	reflectY       shift, and enter state 19
	conjugate      shift, and enter state 20
	negate         shift, and enter state 21
	subtile        shift, and enter state 22
	fill           shift, and enter state 23
	build          shift, and enter state 24
	'('            shift, and enter state 25
	var            shift, and enter state 26

	Tile           goto state 86

State 40

	Tile -> reflectX '(' . Tile ')'                     (rule 14)

	rotate         shift, and enter state 16
	scale          shift, and enter state 17
	reflectX       shift, and enter state 18
	reflectY       shift, and enter state 19
	conjugate      shift, and enter state 20
	negate         shift, and enter state 21
	subtile        shift, and enter state 22
	fill           shift, and enter state 23
	build          shift, and enter state 24
	'('            shift, and enter state 25
	var            shift, and enter state 26

	Tile           goto state 85

State 41

	Tile -> scale '(' . Num ',' Tile ')'                (rule 13)

	size           shift, and enter state 44
	'('            shift, and enter state 45
	'-'            shift, and enter state 46
	int            shift, and enter state 47
	var            shift, and enter state 48

	Num            goto state 84

State 42

	Tile -> rotate '(' . Num ',' Tile ')'               (rule 12)

	size           shift, and enter state 44
	'('            shift, and enter state 45
	'-'            shift, and enter state 46
	int            shift, and enter state 47
	var            shift, and enter state 48

	Num            goto state 83

State 43

	Exp -> repeat '(' Num . ')' '{' Exp '}'             (rule 5)
	Num -> Num . '+' Num                                (rule 24)
	Num -> Num . '-' Num                                (rule 25)
	Num -> Num . '*' Num                                (rule 26)
	Num -> Num . '/' Num                                (rule 27)
	Num -> Num . '%' Num                                (rule 28)

	')'            shift, and enter state 82
	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'/'            shift, and enter state 73
	'*'            shift, and enter state 74
	'%'            shift, and enter state 75


State 44

	Num -> size . '(' Tile ')'                          (rule 23)

	'('            shift, and enter state 81


State 45

	Num -> '(' . Num ')'                                (rule 32)

	size           shift, and enter state 44
	'('            shift, and enter state 45
	'-'            shift, and enter state 46
	int            shift, and enter state 47
	var            shift, and enter state 48

	Num            goto state 80

State 46

	Num -> '-' . Num                                    (rule 29)

	size           shift, and enter state 44
	'('            shift, and enter state 45
	'-'            shift, and enter state 46
	int            shift, and enter state 47
	var            shift, and enter state 48

	Num            goto state 79

State 47

	Num -> int .                                        (rule 30)

	'}'            reduce using rule 30
	')'            reduce using rule 30
	','            reduce using rule 30
	'+'            reduce using rule 30
	'-'            reduce using rule 30
	'/'            reduce using rule 30
	'*'            reduce using rule 30
	'%'            reduce using rule 30
	'='            reduce using rule 30
	'<'            reduce using rule 30
	'>'            reduce using rule 30
	';'            reduce using rule 30
	AND            reduce using rule 30
	OR             reduce using rule 30
	%eof           reduce using rule 30


State 48

	Num -> var .                                        (rule 31)

	'}'            reduce using rule 31
	')'            reduce using rule 31
	','            reduce using rule 31
	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'/'            reduce using rule 31
	'*'            reduce using rule 31
	'%'            reduce using rule 31
	'='            reduce using rule 31
	'<'            reduce using rule 31
	'>'            reduce using rule 31
	';'            reduce using rule 31
	AND            reduce using rule 31
	OR             reduce using rule 31
	%eof           reduce using rule 31


State 49

	Exp -> for '(' var . ',' Num ',' Num ')' '{' Exp '}'    (rule 6)

	','            shift, and enter state 78


State 50

	Vars -> Tile .                                      (rule 47)

	'}'            reduce using rule 47
	')'            reduce using rule 47
	'='            reduce using rule 47
	';'            reduce using rule 47
	AND            reduce using rule 47
	OR             reduce using rule 47
	%eof           reduce using rule 47


State 51

	Num -> Num . '+' Num                                (rule 24)
	Num -> Num . '-' Num                                (rule 25)
	Num -> Num . '*' Num                                (rule 26)
	Num -> Num . '/' Num                                (rule 27)
	Num -> Num . '%' Num                                (rule 28)
	Bool -> Num . '<' Num                               (rule 38)
	Bool -> Num . '>' Num                               (rule 39)
	Bool -> Num . '<' '=' Num                           (rule 40)
	Bool -> Num . '>' '=' Num                           (rule 41)
	Vars -> Num .                                       (rule 45)

	'}'            reduce using rule 45
	')'            reduce using rule 45
	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'/'            shift, and enter state 73
	'*'            shift, and enter state 74
	'%'            shift, and enter state 75
	'='            reduce using rule 45
	'<'            shift, and enter state 76
	'>'            shift, and enter state 77
	';'            reduce using rule 45
	AND            reduce using rule 45
	OR             reduce using rule 45
	%eof           reduce using rule 45


State 52

	Exp -> if '(' Bool . ')' '{' Exp '}' else '{' Exp '}'    (rule 7)
	Exp -> if '(' Bool . ')' '{' Exp '}'                (rule 8)
	Bool -> Bool . AND Bool                             (rule 35)
	Bool -> Bool . OR Bool                              (rule 36)
	Vars -> Bool .                                      (rule 46)

	')'            shift, and enter state 70
	'='            reduce using rule 46
	AND            shift, and enter state 63
	OR             shift, and enter state 64


State 53

	Bool -> Vars . '=' '=' Vars                         (rule 43)

	'='            shift, and enter state 62


State 54

	Tile -> '(' . Tile ')'                              (rule 22)
	Num -> '(' . Num ')'                                (rule 32)
	Bool -> '(' . Bool ')'                              (rule 44)

	rotate         shift, and enter state 16
	scale          shift, and enter state 17
	size           shift, and enter state 44
	reflectX       shift, and enter state 18
	reflectY       shift, and enter state 19
	conjugate      shift, and enter state 20
	negate         shift, and enter state 21
	subtile        shift, and enter state 22
	fill           shift, and enter state 23
	build          shift, and enter state 24
	'('            shift, and enter state 54
	'-'            shift, and enter state 46
	'~'            shift, and enter state 55
	true           shift, and enter state 56
	false          shift, and enter state 57
	NOT            shift, and enter state 58
	int            shift, and enter state 47
	var            shift, and enter state 59

	Tile           goto state 67
	Num            goto state 68
	Bool           goto state 69
	Vars           goto state 53

State 55

	Vars -> '~' . var                                   (rule 48)

	var            shift, and enter state 66


State 56

	Bool -> true .                                      (rule 33)

	'}'            reduce using rule 33
	')'            reduce using rule 33
	'='            reduce using rule 33
	';'            reduce using rule 33
	AND            reduce using rule 33
	OR             reduce using rule 33
	%eof           reduce using rule 33


State 57

	Bool -> false .                                     (rule 34)

	'}'            reduce using rule 34
	')'            reduce using rule 34
	'='            reduce using rule 34
	';'            reduce using rule 34
	AND            reduce using rule 34
	OR             reduce using rule 34
	%eof           reduce using rule 34


State 58

	Bool -> NOT . Bool                                  (rule 37)

	rotate         shift, and enter state 16
	scale          shift, and enter state 17
	size           shift, and enter state 44
	reflectX       shift, and enter state 18
	reflectY       shift, and enter state 19
	conjugate      shift, and enter state 20
	negate         shift, and enter state 21
	subtile        shift, and enter state 22
	fill           shift, and enter state 23
	build          shift, and enter state 24
	'('            shift, and enter state 54
	'-'            shift, and enter state 46
	'~'            shift, and enter state 55
	true           shift, and enter state 56
	false          shift, and enter state 57
	NOT            shift, and enter state 58
	int            shift, and enter state 47
	var            shift, and enter state 59

	Tile           goto state 50
	Num            goto state 51
	Bool           goto state 65
	Vars           goto state 53

State 59

	Tile -> var .                                       (rule 21)
	Num -> var .                                        (rule 31)
	Bool -> var .                                       (rule 42)

	'}'            reduce using rule 42
			(reduce using rule 31)
			(reduce using rule 21)

	')'            reduce using rule 42
			(reduce using rule 31)
			(reduce using rule 21)

	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'/'            reduce using rule 31
	'*'            reduce using rule 31
	'%'            reduce using rule 31
	'='            reduce using rule 42
			(reduce using rule 31)
			(reduce using rule 21)

	'<'            reduce using rule 31
	'>'            reduce using rule 31
	';'            reduce using rule 42
			(reduce using rule 31)
			(reduce using rule 21)

	AND            reduce using rule 42
			(reduce using rule 31)
			(reduce using rule 21)

	OR             reduce using rule 42
			(reduce using rule 31)
			(reduce using rule 21)

	%eof           reduce using rule 42
			(reduce using rule 31)
			(reduce using rule 21)



State 60

	Bool -> Bool . AND Bool                             (rule 35)
	Bool -> Bool . OR Bool                              (rule 36)
	Vars -> Bool .                                      (rule 46)

	'}'            reduce using rule 46
	')'            reduce using rule 46
	'='            reduce using rule 46
	';'            reduce using rule 46
	AND            shift, and enter state 63
			(reduce using rule 46)

	OR             shift, and enter state 64
			(reduce using rule 46)

	%eof           reduce using rule 46


State 61

	Exp -> var '=' Vars .                               (rule 9)
	Bool -> Vars . '=' '=' Vars                         (rule 43)

	'}'            reduce using rule 9
	'='            shift, and enter state 62
	';'            reduce using rule 9
	%eof           reduce using rule 9


State 62

	Bool -> Vars '=' . '=' Vars                         (rule 43)

	'='            shift, and enter state 123


State 63

	Bool -> Bool AND . Bool                             (rule 35)

	rotate         shift, and enter state 16
	scale          shift, and enter state 17
	size           shift, and enter state 44
	reflectX       shift, and enter state 18
	reflectY       shift, and enter state 19
	conjugate      shift, and enter state 20
	negate         shift, and enter state 21
	subtile        shift, and enter state 22
	fill           shift, and enter state 23
	build          shift, and enter state 24
	'('            shift, and enter state 54
	'-'            shift, and enter state 46
	'~'            shift, and enter state 55
	true           shift, and enter state 56
	false          shift, and enter state 57
	NOT            shift, and enter state 58
	int            shift, and enter state 47
	var            shift, and enter state 59

	Tile           goto state 50
	Num            goto state 51
	Bool           goto state 122
	Vars           goto state 53

State 64

	Bool -> Bool OR . Bool                              (rule 36)

	rotate         shift, and enter state 16
	scale          shift, and enter state 17
	size           shift, and enter state 44
	reflectX       shift, and enter state 18
	reflectY       shift, and enter state 19
	conjugate      shift, and enter state 20
	negate         shift, and enter state 21
	subtile        shift, and enter state 22
	fill           shift, and enter state 23
	build          shift, and enter state 24
	'('            shift, and enter state 54
	'-'            shift, and enter state 46
	'~'            shift, and enter state 55
	true           shift, and enter state 56
	false          shift, and enter state 57
	NOT            shift, and enter state 58
	int            shift, and enter state 47
	var            shift, and enter state 59

	Tile           goto state 50
	Num            goto state 51
	Bool           goto state 121
	Vars           goto state 53

State 65

	Bool -> Bool . AND Bool                             (rule 35)
	Bool -> Bool . OR Bool                              (rule 36)
	Bool -> NOT Bool .                                  (rule 37)
	Vars -> Bool .                                      (rule 46)

	'}'            reduce using rule 37
	')'            reduce using rule 37
	'='            reduce using rule 46
			(reduce using rule 37)

	';'            reduce using rule 37
	AND            reduce using rule 37
	OR             reduce using rule 37
	%eof           reduce using rule 37


State 66

	Vars -> '~' var .                                   (rule 48)

	'}'            reduce using rule 48
	')'            reduce using rule 48
	'='            reduce using rule 48
	';'            reduce using rule 48
	AND            reduce using rule 48
	OR             reduce using rule 48
	%eof           reduce using rule 48


State 67

	Tile -> '(' Tile . ')'                              (rule 22)
	Vars -> Tile .                                      (rule 47)

	')'            shift, and enter state 94
	'='            reduce using rule 47


State 68

	Num -> Num . '+' Num                                (rule 24)
	Num -> Num . '-' Num                                (rule 25)
	Num -> Num . '*' Num                                (rule 26)
	Num -> Num . '/' Num                                (rule 27)
	Num -> Num . '%' Num                                (rule 28)
	Num -> '(' Num . ')'                                (rule 32)
	Bool -> Num . '<' Num                               (rule 38)
	Bool -> Num . '>' Num                               (rule 39)
	Bool -> Num . '<' '=' Num                           (rule 40)
	Bool -> Num . '>' '=' Num                           (rule 41)
	Vars -> Num .                                       (rule 45)

	')'            shift, and enter state 108
	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'/'            shift, and enter state 73
	'*'            shift, and enter state 74
	'%'            shift, and enter state 75
	'='            reduce using rule 45
	'<'            shift, and enter state 76
	'>'            shift, and enter state 77


State 69

	Bool -> Bool . AND Bool                             (rule 35)
	Bool -> Bool . OR Bool                              (rule 36)
	Bool -> '(' Bool . ')'                              (rule 44)
	Vars -> Bool .                                      (rule 46)

	')'            shift, and enter state 120
	'='            reduce using rule 46
	AND            shift, and enter state 63
	OR             shift, and enter state 64


State 70

	Exp -> if '(' Bool ')' . '{' Exp '}' else '{' Exp '}'    (rule 7)
	Exp -> if '(' Bool ')' . '{' Exp '}'                (rule 8)

	'{'            shift, and enter state 119


State 71

	Num -> Num '+' . Num                                (rule 24)

	size           shift, and enter state 44
	'('            shift, and enter state 45
	'-'            shift, and enter state 46
	int            shift, and enter state 47
	var            shift, and enter state 48

	Num            goto state 118

State 72

	Num -> Num '-' . Num                                (rule 25)

	size           shift, and enter state 44
	'('            shift, and enter state 45
	'-'            shift, and enter state 46
	int            shift, and enter state 47
	var            shift, and enter state 48

	Num            goto state 117

State 73

	Num -> Num '/' . Num                                (rule 27)

	size           shift, and enter state 44
	'('            shift, and enter state 45
	'-'            shift, and enter state 46
	int            shift, and enter state 47
	var            shift, and enter state 48

	Num            goto state 116

State 74

	Num -> Num '*' . Num                                (rule 26)

	size           shift, and enter state 44
	'('            shift, and enter state 45
	'-'            shift, and enter state 46
	int            shift, and enter state 47
	var            shift, and enter state 48

	Num            goto state 115

State 75

	Num -> Num '%' . Num                                (rule 28)

	size           shift, and enter state 44
	'('            shift, and enter state 45
	'-'            shift, and enter state 46
	int            shift, and enter state 47
	var            shift, and enter state 48

	Num            goto state 114

State 76

	Bool -> Num '<' . Num                               (rule 38)
	Bool -> Num '<' . '=' Num                           (rule 40)

	size           shift, and enter state 44
	'('            shift, and enter state 45
	'-'            shift, and enter state 46
	'='            shift, and enter state 113
	int            shift, and enter state 47
	var            shift, and enter state 48

	Num            goto state 112

State 77

	Bool -> Num '>' . Num                               (rule 39)
	Bool -> Num '>' . '=' Num                           (rule 41)

	size           shift, and enter state 44
	'('            shift, and enter state 45
	'-'            shift, and enter state 46
	'='            shift, and enter state 111
	int            shift, and enter state 47
	var            shift, and enter state 48

	Num            goto state 110

State 78

	Exp -> for '(' var ',' . Num ',' Num ')' '{' Exp '}'    (rule 6)

	size           shift, and enter state 44
	'('            shift, and enter state 45
	'-'            shift, and enter state 46
	int            shift, and enter state 47
	var            shift, and enter state 48

	Num            goto state 109

State 79

	Num -> Num . '+' Num                                (rule 24)
	Num -> Num . '-' Num                                (rule 25)
	Num -> Num . '*' Num                                (rule 26)
	Num -> Num . '/' Num                                (rule 27)
	Num -> Num . '%' Num                                (rule 28)
	Num -> '-' Num .                                    (rule 29)

	'}'            reduce using rule 29
	')'            reduce using rule 29
	','            reduce using rule 29
	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'/'            reduce using rule 29
	'*'            reduce using rule 29
	'%'            reduce using rule 29
	'='            reduce using rule 29
	'<'            reduce using rule 29
	'>'            reduce using rule 29
	';'            reduce using rule 29
	AND            reduce using rule 29
	OR             reduce using rule 29
	%eof           reduce using rule 29


State 80

	Num -> Num . '+' Num                                (rule 24)
	Num -> Num . '-' Num                                (rule 25)
	Num -> Num . '*' Num                                (rule 26)
	Num -> Num . '/' Num                                (rule 27)
	Num -> Num . '%' Num                                (rule 28)
	Num -> '(' Num . ')'                                (rule 32)

	')'            shift, and enter state 108
	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'/'            shift, and enter state 73
	'*'            shift, and enter state 74
	'%'            shift, and enter state 75


State 81

	Num -> size '(' . Tile ')'                          (rule 23)

	rotate         shift, and enter state 16
	scale          shift, and enter state 17
	reflectX       shift, and enter state 18
	reflectY       shift, and enter state 19
	conjugate      shift, and enter state 20
	negate         shift, and enter state 21
	subtile        shift, and enter state 22
	fill           shift, and enter state 23
	build          shift, and enter state 24
	'('            shift, and enter state 25
	var            shift, and enter state 26

	Tile           goto state 107

State 82

	Exp -> repeat '(' Num ')' . '{' Exp '}'             (rule 5)

	'{'            shift, and enter state 106


State 83

	Tile -> rotate '(' Num . ',' Tile ')'               (rule 12)
	Num -> Num . '+' Num                                (rule 24)
	Num -> Num . '-' Num                                (rule 25)
	Num -> Num . '*' Num                                (rule 26)
	Num -> Num . '/' Num                                (rule 27)
	Num -> Num . '%' Num                                (rule 28)

	','            shift, and enter state 105
	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'/'            shift, and enter state 73
	'*'            shift, and enter state 74
	'%'            shift, and enter state 75


State 84

	Tile -> scale '(' Num . ',' Tile ')'                (rule 13)
	Num -> Num . '+' Num                                (rule 24)
	Num -> Num . '-' Num                                (rule 25)
	Num -> Num . '*' Num                                (rule 26)
	Num -> Num . '/' Num                                (rule 27)
	Num -> Num . '%' Num                                (rule 28)

	','            shift, and enter state 104
	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'/'            shift, and enter state 73
	'*'            shift, and enter state 74
	'%'            shift, and enter state 75


State 85

	Tile -> reflectX '(' Tile . ')'                     (rule 14)

	')'            shift, and enter state 103


State 86

	Tile -> reflectY '(' Tile . ')'                     (rule 15)

	')'            shift, and enter state 102


State 87

	Tile -> conjugate '(' Tile . ',' Tile ')'           (rule 16)

	','            shift, and enter state 101


State 88

	Tile -> negate '(' Tile . ')'                       (rule 17)

	')'            shift, and enter state 100


State 89

	Tile -> subtile '(' Tile . ',' Num ',' Num ',' Num ')'    (rule 18)

	','            shift, and enter state 99


State 90

	Tile -> fill '(' Colour . ',' Num ')'               (rule 19)

	','            shift, and enter state 98


State 91

	Colour -> white .                                   (rule 51)

	','            reduce using rule 51


State 92

	Colour -> black .                                   (rule 52)

	','            reduce using rule 52


State 93

	Exp -> Exp . ';' Exp                                (rule 10)
	Exp -> Exp . ';'                                    (rule 11)
	Tile -> build '{' Exp . '}'                         (rule 20)

	'}'            shift, and enter state 97
	';'            shift, and enter state 27


State 94

	Tile -> '(' Tile ')' .                              (rule 22)

	'}'            reduce using rule 22
	')'            reduce using rule 22
	','            reduce using rule 22
	'='            reduce using rule 22
	';'            reduce using rule 22
	AND            reduce using rule 22
	OR             reduce using rule 22
	%eof           reduce using rule 22


State 95

	Init -> input Inps ';' Exp .                        (rule 1)
	Exp -> Exp . ';' Exp                                (rule 10)
	Exp -> Exp . ';'                                    (rule 11)

	';'            shift, and enter state 27
	%eof           reduce using rule 1


State 96

	Inps -> var ',' Inps .                              (rule 50)

	';'            reduce using rule 50


State 97

	Tile -> build '{' Exp '}' .                         (rule 20)

	'}'            reduce using rule 20
	')'            reduce using rule 20
	','            reduce using rule 20
	'='            reduce using rule 20
	';'            reduce using rule 20
	AND            reduce using rule 20
	OR             reduce using rule 20
	%eof           reduce using rule 20


State 98

	Tile -> fill '(' Colour ',' . Num ')'               (rule 19)

	size           shift, and enter state 44
	'('            shift, and enter state 45
	'-'            shift, and enter state 46
	int            shift, and enter state 47
	var            shift, and enter state 48

	Num            goto state 135

State 99

	Tile -> subtile '(' Tile ',' . Num ',' Num ',' Num ')'    (rule 18)

	size           shift, and enter state 44
	'('            shift, and enter state 45
	'-'            shift, and enter state 46
	int            shift, and enter state 47
	var            shift, and enter state 48

	Num            goto state 134

State 100

	Tile -> negate '(' Tile ')' .                       (rule 17)

	'}'            reduce using rule 17
	')'            reduce using rule 17
	','            reduce using rule 17
	'='            reduce using rule 17
	';'            reduce using rule 17
	AND            reduce using rule 17
	OR             reduce using rule 17
	%eof           reduce using rule 17


State 101

	Tile -> conjugate '(' Tile ',' . Tile ')'           (rule 16)

	rotate         shift, and enter state 16
	scale          shift, and enter state 17
	reflectX       shift, and enter state 18
	reflectY       shift, and enter state 19
	conjugate      shift, and enter state 20
	negate         shift, and enter state 21
	subtile        shift, and enter state 22
	fill           shift, and enter state 23
	build          shift, and enter state 24
	'('            shift, and enter state 25
	var            shift, and enter state 26

	Tile           goto state 133

State 102

	Tile -> reflectY '(' Tile ')' .                     (rule 15)

	'}'            reduce using rule 15
	')'            reduce using rule 15
	','            reduce using rule 15
	'='            reduce using rule 15
	';'            reduce using rule 15
	AND            reduce using rule 15
	OR             reduce using rule 15
	%eof           reduce using rule 15


State 103

	Tile -> reflectX '(' Tile ')' .                     (rule 14)

	'}'            reduce using rule 14
	')'            reduce using rule 14
	','            reduce using rule 14
	'='            reduce using rule 14
	';'            reduce using rule 14
	AND            reduce using rule 14
	OR             reduce using rule 14
	%eof           reduce using rule 14


State 104

	Tile -> scale '(' Num ',' . Tile ')'                (rule 13)

	rotate         shift, and enter state 16
	scale          shift, and enter state 17
	reflectX       shift, and enter state 18
	reflectY       shift, and enter state 19
	conjugate      shift, and enter state 20
	negate         shift, and enter state 21
	subtile        shift, and enter state 22
	fill           shift, and enter state 23
	build          shift, and enter state 24
	'('            shift, and enter state 25
	var            shift, and enter state 26

	Tile           goto state 132

State 105

	Tile -> rotate '(' Num ',' . Tile ')'               (rule 12)

	rotate         shift, and enter state 16
	scale          shift, and enter state 17
	reflectX       shift, and enter state 18
	reflectY       shift, and enter state 19
	conjugate      shift, and enter state 20
	negate         shift, and enter state 21
	subtile        shift, and enter state 22
	fill           shift, and enter state 23
	build          shift, and enter state 24
	'('            shift, and enter state 25
	var            shift, and enter state 26

	Tile           goto state 131

State 106

	Exp -> repeat '(' Num ')' '{' . Exp '}'             (rule 5)

	place          shift, and enter state 5
	newLine        shift, and enter state 6
	repeat         shift, and enter state 7
	for            shift, and enter state 8
	if             shift, and enter state 9
	var            shift, and enter state 10

	Exp            goto state 130

State 107

	Num -> size '(' Tile . ')'                          (rule 23)

	')'            shift, and enter state 129


State 108

	Num -> '(' Num ')' .                                (rule 32)

	'}'            reduce using rule 32
	')'            reduce using rule 32
	','            reduce using rule 32
	'+'            reduce using rule 32
	'-'            reduce using rule 32
	'/'            reduce using rule 32
	'*'            reduce using rule 32
	'%'            reduce using rule 32
	'='            reduce using rule 32
	'<'            reduce using rule 32
	'>'            reduce using rule 32
	';'            reduce using rule 32
	AND            reduce using rule 32
	OR             reduce using rule 32
	%eof           reduce using rule 32


State 109

	Exp -> for '(' var ',' Num . ',' Num ')' '{' Exp '}'    (rule 6)
	Num -> Num . '+' Num                                (rule 24)
	Num -> Num . '-' Num                                (rule 25)
	Num -> Num . '*' Num                                (rule 26)
	Num -> Num . '/' Num                                (rule 27)
	Num -> Num . '%' Num                                (rule 28)

	','            shift, and enter state 128
	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'/'            shift, and enter state 73
	'*'            shift, and enter state 74
	'%'            shift, and enter state 75


State 110

	Num -> Num . '+' Num                                (rule 24)
	Num -> Num . '-' Num                                (rule 25)
	Num -> Num . '*' Num                                (rule 26)
	Num -> Num . '/' Num                                (rule 27)
	Num -> Num . '%' Num                                (rule 28)
	Bool -> Num '>' Num .                               (rule 39)

	'}'            reduce using rule 39
	')'            reduce using rule 39
	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'/'            shift, and enter state 73
	'*'            shift, and enter state 74
	'%'            shift, and enter state 75
	'='            reduce using rule 39
	';'            reduce using rule 39
	AND            reduce using rule 39
	OR             reduce using rule 39
	%eof           reduce using rule 39


State 111

	Bool -> Num '>' '=' . Num                           (rule 41)

	size           shift, and enter state 44
	'('            shift, and enter state 45
	'-'            shift, and enter state 46
	int            shift, and enter state 47
	var            shift, and enter state 48

	Num            goto state 127

State 112

	Num -> Num . '+' Num                                (rule 24)
	Num -> Num . '-' Num                                (rule 25)
	Num -> Num . '*' Num                                (rule 26)
	Num -> Num . '/' Num                                (rule 27)
	Num -> Num . '%' Num                                (rule 28)
	Bool -> Num '<' Num .                               (rule 38)

	'}'            reduce using rule 38
	')'            reduce using rule 38
	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'/'            shift, and enter state 73
	'*'            shift, and enter state 74
	'%'            shift, and enter state 75
	'='            reduce using rule 38
	';'            reduce using rule 38
	AND            reduce using rule 38
	OR             reduce using rule 38
	%eof           reduce using rule 38


State 113

	Bool -> Num '<' '=' . Num                           (rule 40)

	size           shift, and enter state 44
	'('            shift, and enter state 45
	'-'            shift, and enter state 46
	int            shift, and enter state 47
	var            shift, and enter state 48

	Num            goto state 126

State 114

	Num -> Num . '+' Num                                (rule 24)
	Num -> Num . '-' Num                                (rule 25)
	Num -> Num . '*' Num                                (rule 26)
	Num -> Num . '/' Num                                (rule 27)
	Num -> Num . '%' Num                                (rule 28)
	Num -> Num '%' Num .                                (rule 28)

	'}'            reduce using rule 28
	')'            reduce using rule 28
	','            reduce using rule 28
	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'/'            reduce using rule 28
	'*'            reduce using rule 28
	'%'            reduce using rule 28
	'='            reduce using rule 28
	'<'            reduce using rule 28
	'>'            reduce using rule 28
	';'            reduce using rule 28
	AND            reduce using rule 28
	OR             reduce using rule 28
	%eof           reduce using rule 28


State 115

	Num -> Num . '+' Num                                (rule 24)
	Num -> Num . '-' Num                                (rule 25)
	Num -> Num . '*' Num                                (rule 26)
	Num -> Num '*' Num .                                (rule 26)
	Num -> Num . '/' Num                                (rule 27)
	Num -> Num . '%' Num                                (rule 28)

	'}'            reduce using rule 26
	')'            reduce using rule 26
	','            reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'/'            reduce using rule 26
	'*'            reduce using rule 26
	'%'            reduce using rule 26
	'='            reduce using rule 26
	'<'            reduce using rule 26
	'>'            reduce using rule 26
	';'            reduce using rule 26
	AND            reduce using rule 26
	OR             reduce using rule 26
	%eof           reduce using rule 26


State 116

	Num -> Num . '+' Num                                (rule 24)
	Num -> Num . '-' Num                                (rule 25)
	Num -> Num . '*' Num                                (rule 26)
	Num -> Num . '/' Num                                (rule 27)
	Num -> Num '/' Num .                                (rule 27)
	Num -> Num . '%' Num                                (rule 28)

	'}'            reduce using rule 27
	')'            reduce using rule 27
	','            reduce using rule 27
	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'/'            reduce using rule 27
	'*'            reduce using rule 27
	'%'            reduce using rule 27
	'='            reduce using rule 27
	'<'            reduce using rule 27
	'>'            reduce using rule 27
	';'            reduce using rule 27
	AND            reduce using rule 27
	OR             reduce using rule 27
	%eof           reduce using rule 27


State 117

	Num -> Num . '+' Num                                (rule 24)
	Num -> Num . '-' Num                                (rule 25)
	Num -> Num '-' Num .                                (rule 25)
	Num -> Num . '*' Num                                (rule 26)
	Num -> Num . '/' Num                                (rule 27)
	Num -> Num . '%' Num                                (rule 28)

	'}'            reduce using rule 25
	')'            reduce using rule 25
	','            reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'/'            shift, and enter state 73
	'*'            shift, and enter state 74
	'%'            shift, and enter state 75
	'='            reduce using rule 25
	'<'            reduce using rule 25
	'>'            reduce using rule 25
	';'            reduce using rule 25
	AND            reduce using rule 25
	OR             reduce using rule 25
	%eof           reduce using rule 25


State 118

	Num -> Num . '+' Num                                (rule 24)
	Num -> Num '+' Num .                                (rule 24)
	Num -> Num . '-' Num                                (rule 25)
	Num -> Num . '*' Num                                (rule 26)
	Num -> Num . '/' Num                                (rule 27)
	Num -> Num . '%' Num                                (rule 28)

	'}'            reduce using rule 24
	')'            reduce using rule 24
	','            reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'/'            shift, and enter state 73
	'*'            shift, and enter state 74
	'%'            shift, and enter state 75
	'='            reduce using rule 24
	'<'            reduce using rule 24
	'>'            reduce using rule 24
	';'            reduce using rule 24
	AND            reduce using rule 24
	OR             reduce using rule 24
	%eof           reduce using rule 24


State 119

	Exp -> if '(' Bool ')' '{' . Exp '}' else '{' Exp '}'    (rule 7)
	Exp -> if '(' Bool ')' '{' . Exp '}'                (rule 8)

	place          shift, and enter state 5
	newLine        shift, and enter state 6
	repeat         shift, and enter state 7
	for            shift, and enter state 8
	if             shift, and enter state 9
	var            shift, and enter state 10

	Exp            goto state 125

State 120

	Bool -> '(' Bool ')' .                              (rule 44)

	'}'            reduce using rule 44
	')'            reduce using rule 44
	'='            reduce using rule 44
	';'            reduce using rule 44
	AND            reduce using rule 44
	OR             reduce using rule 44
	%eof           reduce using rule 44


State 121

	Bool -> Bool . AND Bool                             (rule 35)
	Bool -> Bool . OR Bool                              (rule 36)
	Bool -> Bool OR Bool .                              (rule 36)
	Vars -> Bool .                                      (rule 46)

	'}'            reduce using rule 36
	')'            reduce using rule 36
	'='            reduce using rule 46
			(reduce using rule 36)

	';'            reduce using rule 36
	AND            reduce using rule 36
	OR             reduce using rule 36
	%eof           reduce using rule 36


State 122

	Bool -> Bool . AND Bool                             (rule 35)
	Bool -> Bool AND Bool .                             (rule 35)
	Bool -> Bool . OR Bool                              (rule 36)
	Vars -> Bool .                                      (rule 46)

	'}'            reduce using rule 35
	')'            reduce using rule 35
	'='            reduce using rule 46
			(reduce using rule 35)

	';'            reduce using rule 35
	AND            reduce using rule 35
	OR             reduce using rule 35
	%eof           reduce using rule 35


State 123

	Bool -> Vars '=' '=' . Vars                         (rule 43)

	rotate         shift, and enter state 16
	scale          shift, and enter state 17
	size           shift, and enter state 44
	reflectX       shift, and enter state 18
	reflectY       shift, and enter state 19
	conjugate      shift, and enter state 20
	negate         shift, and enter state 21
	subtile        shift, and enter state 22
	fill           shift, and enter state 23
	build          shift, and enter state 24
	'('            shift, and enter state 54
	'-'            shift, and enter state 46
	'~'            shift, and enter state 55
	true           shift, and enter state 56
	false          shift, and enter state 57
	NOT            shift, and enter state 58
	int            shift, and enter state 47
	var            shift, and enter state 59

	Tile           goto state 50
	Num            goto state 51
	Bool           goto state 60
	Vars           goto state 124

State 124

	Bool -> Vars . '=' '=' Vars                         (rule 43)
	Bool -> Vars '=' '=' Vars .                         (rule 43)

	'}'            reduce using rule 43
	')'            reduce using rule 43
	'='            shift, and enter state 62
	';'            reduce using rule 43
	AND            reduce using rule 43
	OR             reduce using rule 43
	%eof           reduce using rule 43


State 125

	Exp -> if '(' Bool ')' '{' Exp . '}' else '{' Exp '}'    (rule 7)
	Exp -> if '(' Bool ')' '{' Exp . '}'                (rule 8)
	Exp -> Exp . ';' Exp                                (rule 10)
	Exp -> Exp . ';'                                    (rule 11)

	'}'            shift, and enter state 143
	';'            shift, and enter state 27


State 126

	Num -> Num . '+' Num                                (rule 24)
	Num -> Num . '-' Num                                (rule 25)
	Num -> Num . '*' Num                                (rule 26)
	Num -> Num . '/' Num                                (rule 27)
	Num -> Num . '%' Num                                (rule 28)
	Bool -> Num '<' '=' Num .                           (rule 40)

	'}'            reduce using rule 40
	')'            reduce using rule 40
	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'/'            shift, and enter state 73
	'*'            shift, and enter state 74
	'%'            shift, and enter state 75
	'='            reduce using rule 40
	';'            reduce using rule 40
	AND            reduce using rule 40
	OR             reduce using rule 40
	%eof           reduce using rule 40


State 127

	Num -> Num . '+' Num                                (rule 24)
	Num -> Num . '-' Num                                (rule 25)
	Num -> Num . '*' Num                                (rule 26)
	Num -> Num . '/' Num                                (rule 27)
	Num -> Num . '%' Num                                (rule 28)
	Bool -> Num '>' '=' Num .                           (rule 41)

	'}'            reduce using rule 41
	')'            reduce using rule 41
	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'/'            shift, and enter state 73
	'*'            shift, and enter state 74
	'%'            shift, and enter state 75
	'='            reduce using rule 41
	';'            reduce using rule 41
	AND            reduce using rule 41
	OR             reduce using rule 41
	%eof           reduce using rule 41


State 128

	Exp -> for '(' var ',' Num ',' . Num ')' '{' Exp '}'    (rule 6)

	size           shift, and enter state 44
	'('            shift, and enter state 45
	'-'            shift, and enter state 46
	int            shift, and enter state 47
	var            shift, and enter state 48

	Num            goto state 142

State 129

	Num -> size '(' Tile ')' .                          (rule 23)

	'}'            reduce using rule 23
	')'            reduce using rule 23
	','            reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'/'            reduce using rule 23
	'*'            reduce using rule 23
	'%'            reduce using rule 23
	'='            reduce using rule 23
	'<'            reduce using rule 23
	'>'            reduce using rule 23
	';'            reduce using rule 23
	AND            reduce using rule 23
	OR             reduce using rule 23
	%eof           reduce using rule 23


State 130

	Exp -> repeat '(' Num ')' '{' Exp . '}'             (rule 5)
	Exp -> Exp . ';' Exp                                (rule 10)
	Exp -> Exp . ';'                                    (rule 11)

	'}'            shift, and enter state 141
	';'            shift, and enter state 27


State 131

	Tile -> rotate '(' Num ',' Tile . ')'               (rule 12)

	')'            shift, and enter state 140


State 132

	Tile -> scale '(' Num ',' Tile . ')'                (rule 13)

	')'            shift, and enter state 139


State 133

	Tile -> conjugate '(' Tile ',' Tile . ')'           (rule 16)

	')'            shift, and enter state 138


State 134

	Tile -> subtile '(' Tile ',' Num . ',' Num ',' Num ')'    (rule 18)
	Num -> Num . '+' Num                                (rule 24)
	Num -> Num . '-' Num                                (rule 25)
	Num -> Num . '*' Num                                (rule 26)
	Num -> Num . '/' Num                                (rule 27)
	Num -> Num . '%' Num                                (rule 28)

	','            shift, and enter state 137
	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'/'            shift, and enter state 73
	'*'            shift, and enter state 74
	'%'            shift, and enter state 75


State 135

	Tile -> fill '(' Colour ',' Num . ')'               (rule 19)
	Num -> Num . '+' Num                                (rule 24)
	Num -> Num . '-' Num                                (rule 25)
	Num -> Num . '*' Num                                (rule 26)
	Num -> Num . '/' Num                                (rule 27)
	Num -> Num . '%' Num                                (rule 28)

	')'            shift, and enter state 136
	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'/'            shift, and enter state 73
	'*'            shift, and enter state 74
	'%'            shift, and enter state 75


State 136

	Tile -> fill '(' Colour ',' Num ')' .               (rule 19)

	'}'            reduce using rule 19
	')'            reduce using rule 19
	','            reduce using rule 19
	'='            reduce using rule 19
	';'            reduce using rule 19
	AND            reduce using rule 19
	OR             reduce using rule 19
	%eof           reduce using rule 19


State 137

	Tile -> subtile '(' Tile ',' Num ',' . Num ',' Num ')'    (rule 18)

	size           shift, and enter state 44
	'('            shift, and enter state 45
	'-'            shift, and enter state 46
	int            shift, and enter state 47
	var            shift, and enter state 48

	Num            goto state 146

State 138

	Tile -> conjugate '(' Tile ',' Tile ')' .           (rule 16)

	'}'            reduce using rule 16
	')'            reduce using rule 16
	','            reduce using rule 16
	'='            reduce using rule 16
	';'            reduce using rule 16
	AND            reduce using rule 16
	OR             reduce using rule 16
	%eof           reduce using rule 16


State 139

	Tile -> scale '(' Num ',' Tile ')' .                (rule 13)

	'}'            reduce using rule 13
	')'            reduce using rule 13
	','            reduce using rule 13
	'='            reduce using rule 13
	';'            reduce using rule 13
	AND            reduce using rule 13
	OR             reduce using rule 13
	%eof           reduce using rule 13


State 140

	Tile -> rotate '(' Num ',' Tile ')' .               (rule 12)

	'}'            reduce using rule 12
	')'            reduce using rule 12
	','            reduce using rule 12
	'='            reduce using rule 12
	';'            reduce using rule 12
	AND            reduce using rule 12
	OR             reduce using rule 12
	%eof           reduce using rule 12


State 141

	Exp -> repeat '(' Num ')' '{' Exp '}' .             (rule 5)

	'}'            reduce using rule 5
	';'            reduce using rule 5
	%eof           reduce using rule 5


State 142

	Exp -> for '(' var ',' Num ',' Num . ')' '{' Exp '}'    (rule 6)
	Num -> Num . '+' Num                                (rule 24)
	Num -> Num . '-' Num                                (rule 25)
	Num -> Num . '*' Num                                (rule 26)
	Num -> Num . '/' Num                                (rule 27)
	Num -> Num . '%' Num                                (rule 28)

	')'            shift, and enter state 145
	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'/'            shift, and enter state 73
	'*'            shift, and enter state 74
	'%'            shift, and enter state 75


State 143

	Exp -> if '(' Bool ')' '{' Exp '}' . else '{' Exp '}'    (rule 7)
	Exp -> if '(' Bool ')' '{' Exp '}' .                (rule 8)

	else           shift, and enter state 144
	'}'            reduce using rule 8
	';'            reduce using rule 8
	%eof           reduce using rule 8


State 144

	Exp -> if '(' Bool ')' '{' Exp '}' else . '{' Exp '}'    (rule 7)

	'{'            shift, and enter state 149


State 145

	Exp -> for '(' var ',' Num ',' Num ')' . '{' Exp '}'    (rule 6)

	'{'            shift, and enter state 148


State 146

	Tile -> subtile '(' Tile ',' Num ',' Num . ',' Num ')'    (rule 18)
	Num -> Num . '+' Num                                (rule 24)
	Num -> Num . '-' Num                                (rule 25)
	Num -> Num . '*' Num                                (rule 26)
	Num -> Num . '/' Num                                (rule 27)
	Num -> Num . '%' Num                                (rule 28)

	','            shift, and enter state 147
	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'/'            shift, and enter state 73
	'*'            shift, and enter state 74
	'%'            shift, and enter state 75


State 147

	Tile -> subtile '(' Tile ',' Num ',' Num ',' . Num ')'    (rule 18)

	size           shift, and enter state 44
	'('            shift, and enter state 45
	'-'            shift, and enter state 46
	int            shift, and enter state 47
	var            shift, and enter state 48

	Num            goto state 152

State 148

	Exp -> for '(' var ',' Num ',' Num ')' '{' . Exp '}'    (rule 6)

	place          shift, and enter state 5
	newLine        shift, and enter state 6
	repeat         shift, and enter state 7
	for            shift, and enter state 8
	if             shift, and enter state 9
	var            shift, and enter state 10

	Exp            goto state 151

State 149

	Exp -> if '(' Bool ')' '{' Exp '}' else '{' . Exp '}'    (rule 7)

	place          shift, and enter state 5
	newLine        shift, and enter state 6
	repeat         shift, and enter state 7
	for            shift, and enter state 8
	if             shift, and enter state 9
	var            shift, and enter state 10

	Exp            goto state 150

State 150

	Exp -> if '(' Bool ')' '{' Exp '}' else '{' Exp . '}'    (rule 7)
	Exp -> Exp . ';' Exp                                (rule 10)
	Exp -> Exp . ';'                                    (rule 11)

	'}'            shift, and enter state 155
	';'            shift, and enter state 27


State 151

	Exp -> for '(' var ',' Num ',' Num ')' '{' Exp . '}'    (rule 6)
	Exp -> Exp . ';' Exp                                (rule 10)
	Exp -> Exp . ';'                                    (rule 11)

	'}'            shift, and enter state 154
	';'            shift, and enter state 27


State 152

	Tile -> subtile '(' Tile ',' Num ',' Num ',' Num . ')'    (rule 18)
	Num -> Num . '+' Num                                (rule 24)
	Num -> Num . '-' Num                                (rule 25)
	Num -> Num . '*' Num                                (rule 26)
	Num -> Num . '/' Num                                (rule 27)
	Num -> Num . '%' Num                                (rule 28)

	')'            shift, and enter state 153
	'+'            shift, and enter state 71
	'-'            shift, and enter state 72
	'/'            shift, and enter state 73
	'*'            shift, and enter state 74
	'%'            shift, and enter state 75


State 153

	Tile -> subtile '(' Tile ',' Num ',' Num ',' Num ')' .    (rule 18)

	'}'            reduce using rule 18
	')'            reduce using rule 18
	','            reduce using rule 18
	'='            reduce using rule 18
	';'            reduce using rule 18
	AND            reduce using rule 18
	OR             reduce using rule 18
	%eof           reduce using rule 18


State 154

	Exp -> for '(' var ',' Num ',' Num ')' '{' Exp '}' .    (rule 6)

	'}'            reduce using rule 6
	';'            reduce using rule 6
	%eof           reduce using rule 6


State 155

	Exp -> if '(' Bool ')' '{' Exp '}' else '{' Exp '}' .    (rule 7)

	'}'            reduce using rule 7
	';'            reduce using rule 7
	%eof           reduce using rule 7


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 53
Number of terminals: 41
Number of non-terminals: 9
Number of states: 156
